# .github/workflows/build.yml
name: Build Executable

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "Pip version: $(pip --version)"
        echo "Python version: $(python --version)"

    - name: Install dependencies with explicit versions
      run: |
        echo "Installing dependencies one by one..."
        
        echo "Installing pandas..."
        pip install "pandas>=1.5.0"
        
        echo "Installing pdfplumber..."
        pip install "pdfplumber>=0.7.0"
        
        echo "Installing customtkinter..."
        pip install "customtkinter>=5.0.0"
        
        echo "Installing extract-msg (note: hyphen in package name)..."
        pip install "extract-msg>=0.44.0"
        
        echo "Installing xlsxwriter..."
        pip install "xlsxwriter>=3.0.0"
        
        echo "Installing pyinstaller..."
        pip install "pyinstaller>=5.0.0"
        
        echo "Installing pillow for icon creation..."
        pip install "pillow>=9.0.0"
        
        echo "All dependencies installed!"

    - name: Verify extract-msg specifically
      run: |
        echo "Testing extract-msg installation specifically..."
        python -c "
        try:
            import extract_msg
            print('[SUCCESS] extract_msg imported successfully')
            print(f'extract_msg version: {extract_msg.__version__ if hasattr(extract_msg, \"__version__\") else \"unknown\"}')
        except ImportError as e:
            print(f'[ERROR] Failed to import extract_msg: {e}')
            print('Attempting to reinstall extract-msg...')
            import subprocess
            import sys
            try:
                subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--force-reinstall', 'extract-msg>=0.44.0'])
                import extract_msg
                print('[SUCCESS] extract_msg installed and imported after reinstall')
            except Exception as e2:
                print(f'[FAILED] Could not install extract-msg: {e2}')
                raise
        "

    - name: Verify PyInstaller command
      run: |
        echo "Testing PyInstaller command..."
        pyinstaller --version
        echo "PyInstaller is working!"

    - name: Verify all Python modules
      run: |
        echo "Final verification of all Python modules..."
        python -c "
        import sys
        
        # Test all required modules
        modules_to_test = [
            ('pandas', 'pandas'),
            ('pdfplumber', 'pdfplumber'), 
            ('customtkinter', 'customtkinter'),
            ('extract_msg', 'extract-msg'),  # Note: import name vs package name
            ('xlsxwriter', 'xlsxwriter')
        ]
        
        all_good = True
        
        for import_name, package_name in modules_to_test:
            try:
                module = __import__(import_name)
                version = getattr(module, '__version__', 'unknown')
                print(f'[OK] {package_name} (import: {import_name}) - version: {version}')
            except ImportError as e:
                print(f'[ERROR] {package_name} (import: {import_name}) - {e}')
                all_good = False
        
        # Test command-line tools
        import subprocess
        try:
            result = subprocess.run(['pyinstaller', '--version'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                print(f'[OK] pyinstaller command - version: {result.stdout.strip()}')
            else:
                print('[ERROR] pyinstaller command failed')
                all_good = False
        except Exception as e:
            print(f'[ERROR] pyinstaller command error: {e}')
            all_good = False
        
        if not all_good:
            print('Some dependencies are missing!')
            sys.exit(1)
        else:
            print('\\nAll dependencies verified successfully!')
        "

    - name: Show all installed packages
      run: |
        echo "Currently installed packages:"
        pip list

    - name: Create application icon
      run: |
        python -c "
        import os
        from pathlib import Path
        
        # Create assets directory
        assets_dir = Path('assets')
        assets_dir.mkdir(exist_ok=True)
        icon_path = assets_dir / 'icon.ico'
        
        if not icon_path.exists():
            print('Creating application icon...')
            try:
                from PIL import Image, ImageDraw, ImageFont
                
                # Create a 64x64 icon with blue background
                size = 64
                img = Image.new('RGBA', (size, size), (70, 130, 180, 255))  # Steel blue
                draw = ImageDraw.Draw(img)
                
                # Draw white document shape
                doc_color = (255, 255, 255, 255)
                margin = 8
                draw.rectangle([margin, margin, size-margin, size-margin], 
                             fill=doc_color, outline=(50, 100, 150, 255), width=2)
                
                # Draw fold in top-right corner
                fold_size = 10
                draw.polygon([
                    (size-margin-fold_size, margin),
                    (size-margin, margin+fold_size),
                    (size-margin, margin)
                ], fill=(200, 200, 200, 255))
                
                # Draw PDF text
                try:
                    font = ImageFont.truetype('arial.ttf', 16)
                except:
                    try:
                        font = ImageFont.truetype('calibri.ttf', 16)
                    except:
                        font = ImageFont.load_default()
                
                text = 'PDF'
                # Calculate text position
                bbox = draw.textbbox((0, 0), text, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]
                x = (size - text_width) // 2
                y = (size - text_height) // 2 + 5
                
                draw.text((x, y), text, fill=(70, 130, 180, 255), font=font)
                
                # Save as ICO with multiple sizes
                img.save(str(icon_path), format='ICO', sizes=[(64, 64), (32, 32), (16, 16)])
                print(f'Created professional icon: {icon_path}')
                
            except ImportError:
                print('PIL not available, creating minimal icon...')
                # Create minimal ICO file that won't cause errors
                with open(icon_path, 'wb') as f:
                    # Simple ICO header for 16x16 icon
                    ico_header = bytes([
                        0x00, 0x00,  # Reserved
                        0x01, 0x00,  # Type (ICO)
                        0x01, 0x00,  # Number of images
                        0x10, 0x10,  # Width, Height (16x16)
                        0x00,        # Colors (0 = 256+)
                        0x00,        # Reserved
                        0x01, 0x00,  # Color planes
                        0x20, 0x00,  # Bits per pixel (32-bit)
                        0x68, 0x04, 0x00, 0x00,  # Size of image data
                        0x16, 0x00, 0x00, 0x00   # Offset to image data
                    ])
                    f.write(ico_header)
                    # Write 16x16 RGBA pixel data (blue background)
                    pixel_data = bytes([70, 130, 180, 255] * (16 * 16))  # Blue pixels
                    f.write(pixel_data)
                print(f'Created minimal icon: {icon_path}')
                
            except Exception as e:
                print(f'Icon creation error: {e}')
                # Create empty file to prevent build errors
                icon_path.touch()
                print(f'Created placeholder icon: {icon_path}')
        else:
            print(f'Icon already exists: {icon_path}')
        "

    - name: Verify project structure
      run: |
        echo "Project structure:"
        Get-ChildItem -Recurse -Name | Sort-Object | ForEach-Object { Write-Host "  $_" }

    - name: Build executable
      run: |
        echo "Starting build process..."
        echo "Current directory: $PWD"
        
        # Verify build script exists
        if (Test-Path "build_scripts/build.py") {
          echo "Build script found, starting build..."
          python build_scripts/build.py
        } else {
          echo "ERROR: build_scripts/build.py not found!"
          echo "Available Python files:"
          Get-ChildItem -Recurse -Filter "*.py" | ForEach-Object { Write-Host "  $($_.FullName)" }
          exit 1
        }

    - name: Verify and test executable
      run: |
        echo "Verifying build results..."
        
        $exe_path = "dist/EmailPDFProcessor.exe"
        
        if (Test-Path $exe_path) {
          $file_info = Get-Item $exe_path
          $size_mb = [math]::Round($file_info.Length / 1MB, 2)
          
          Write-Host "SUCCESS: Executable built successfully!"
          Write-Host "Location: $exe_path"
          Write-Host "Size: $size_mb MB"
          Write-Host "Created: $($file_info.CreationTime)"
          Write-Host "Modified: $($file_info.LastWriteTime)"
          
          # Basic executable test
          try {
            Write-Host "Testing executable startup..."
            $process = Start-Process -FilePath $exe_path -PassThru -WindowStyle Hidden -ErrorAction Stop
            Start-Sleep -Seconds 5
            
            if ($process.HasExited) {
              Write-Host "[OK] Process started and exited cleanly (exit code: $($process.ExitCode))"
            } else {
              Write-Host "[OK] Process is running, terminating test..."
              $process.Kill()
            }
            
            Write-Host "Executable test completed successfully!"
            
          } catch {
            Write-Host "Executable test warning: $($_.Exception.Message)"
            Write-Host "(This may be normal for GUI applications)"
          }
          
        } else {
          Write-Error "CRITICAL ERROR: Executable not found!"
          Write-Host "Contents of dist directory:"
          if (Test-Path "dist") {
            Get-ChildItem "dist" | Format-Table Name, Length, LastWriteTime
          } else {
            Write-Host "dist directory does not exist!"
          }
          
          Write-Host "Contents of current directory:"
          Get-ChildItem | Format-Table Name, Length, LastWriteTime
          
          exit 1
        }

    - name: Upload build artifacts
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: EmailPDFProcessor-Windows-Build-${{ github.run_number }}
        path: |
          dist/EmailPDFProcessor.exe
        retention-days: 30
        compression-level: 6

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v') && success()
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/EmailPDFProcessor.exe
        name: Email PDF Processor ${{ github.ref_name }}
        body: |
          ## 📧📄➡️📊 Email PDF to Excel Processor ${{ github.ref_name }}
          
          **Transform your email PDF attachments into organized Excel spreadsheets with one click!**
          
          ### 🎯 What It Does
          - Extracts PDF attachments from Outlook (.msg) and email (.eml) files
          - Converts SPAR remittance PDFs to structured Excel data
          - Organizes transactions by store with proper categorization
          - Creates multi-worksheet Excel files with summary reports
          
          ### 📥 Quick Start
          1. **Download** `EmailPDFProcessor.exe` below
          2. **Run** the file (no installation needed!)
          3. **Select** your folder containing email files
          4. **Choose** output location for Excel file
          5. **Click** "Process Emails & Generate Excel"
          6. **Done!** Open your organized Excel report
          
          ### 💻 System Requirements
          - Windows 10/11 (64-bit) 
          - 4GB RAM minimum
          - 100MB free space
          
          ### 🛡️ Security Note
          Windows may show a security warning. Click "More info" → "Run anyway" - the app is safe and only processes your files locally.
          
          ### 🔧 Features
          - ✅ Batch processing of multiple emails
          - ✅ Progress tracking with detailed logs  
          - ✅ Automatic temporary file cleanup
          - ✅ Professional GUI interface
          - ✅ SPAR-specific transaction categorization
          - ✅ Multi-format support (.eml/.msg files)
          
          ### 📊 Output Format
          Each Excel file contains:
          - **Individual worksheets** for each processed PDF
          - **Summary worksheet** with processing statistics
          - **Organized columns**: Store, Date, Transaction Type, Description, Amount
          - **Sorted data** by store and date for easy analysis
          
          ---
          
          **Build Details:**
          - Version: ${{ github.ref_name }}
          - Built: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}
          - Build #: ${{ github.run_number }}
          
          Need help? [Create an issue](https://github.com/${{ github.repository }}/issues) or check the README for troubleshooting tips.
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-summary:
    runs-on: ubuntu-latest
    needs: build-windows
    if: always()
    
    steps:
    - name: Generate Build Summary
      run: |
        echo "## 📋 Build Summary Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-windows.result }}" = "success" ]; then
          echo "### 🎉 BUILD SUCCESSFUL!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **EmailPDFProcessor.exe** has been built and tested successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**What's included:**" >> $GITHUB_STEP_SUMMARY
          echo "- Windows 64-bit standalone executable" >> $GITHUB_STEP_SUMMARY
          echo "- All Python dependencies bundled" >> $GITHUB_STEP_SUMMARY
          echo "- Modern GUI with progress tracking" >> $GITHUB_STEP_SUMMARY
          echo "- SPAR remittance processing capability" >> $GITHUB_STEP_SUMMARY
          echo "- Professional application icon" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for use:**" >> $GITHUB_STEP_SUMMARY
          echo "1. 📦 Download from artifacts below" >> $GITHUB_STEP_SUMMARY
          echo "2. 🧪 Test on your Windows machine" >> $GITHUB_STEP_SUMMARY
          echo "3. 🏷️ Create release tag (e.g., v1.0.0) for distribution" >> $GITHUB_STEP_SUMMARY
          
        elif [ "${{ needs.build-windows.result }}" = "failure" ]; then
          echo "### ❌ BUILD FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The build process encountered errors." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Common issues to check:**" >> $GITHUB_STEP_SUMMARY
          echo "- Missing dependencies (pandas, pdfplumber, customtkinter, extract-msg, xlsxwriter)" >> $GITHUB_STEP_SUMMARY
          echo "- Python syntax errors in source code" >> $GITHUB_STEP_SUMMARY
          echo "- Missing source files (src/main.py, build_scripts/build.py)" >> $GITHUB_STEP_SUMMARY
          echo "- PyInstaller configuration problems" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Fix steps:**" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the detailed build logs above" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix identified issues in your code" >> $GITHUB_STEP_SUMMARY
          echo "3. Commit and push changes to retry build" >> $GITHUB_STEP_SUMMARY
          
        else
          echo "### ⏳ BUILD CANCELLED OR SKIPPED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The build was cancelled or skipped." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔗 Quick Links" >> $GITHUB_STEP_SUMMARY
        echo "- [📋 Full Build Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [📦 Download Artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "- [🏠 Repository Home](https://github.com/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
        echo "- [📚 Documentation](https://github.com/${{ github.repository }}#readme)" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
          echo "- [🚀 View Release](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
        fi
