# .github/workflows/build.yml
name: Build Executable

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Allow manual triggering

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Upgrade pip and install build tools
      run: |
        python -m pip install --upgrade pip setuptools wheel
        echo "Pip version:"
        pip --version
        echo "Python version:"
        python --version

    - name: Install PyInstaller first (explicit)
      run: |
        echo "Installing PyInstaller explicitly..."
        pip install pyinstaller>=5.0.0
        echo "Verifying PyInstaller installation..."
        pyinstaller --version

    - name: Install application dependencies
      run: |
        echo "Installing application dependencies..."
        pip install pandas>=1.5.0
        pip install pdfplumber>=0.7.0
        pip install customtkinter>=5.0.0
        pip install extract-msg>=0.44.0
        pip install xlsxwriter>=3.0.0
        echo "Application dependencies installed"

    - name: Install additional dependencies (fallback)
      run: |
        echo "Installing from requirements.txt (if exists)..."
        if (Test-Path "requirements.txt") {
          pip install -r requirements.txt
        } else {
          echo "No requirements.txt found, using explicit installations"
        }

    - name: Verify all dependencies
      run: |
        echo "Verifying all dependencies..."
        python -c "
        import sys
        packages = ['pandas', 'pdfplumber', 'customtkinter', 'extract_msg', 'xlsxwriter', 'pyinstaller']
        missing = []
        for pkg in packages:
            try:
                module_name = pkg.replace('-', '_')
                __import__(module_name)
                print(f'[OK] {pkg}')
            except ImportError as e:
                print(f'[MISSING] {pkg}: {e}')
                missing.append(pkg)
        
        if missing:
            print(f'Missing packages: {missing}')
            print('Attempting to install missing packages...')
            import subprocess
            for pkg in missing:
                try:
                    subprocess.check_call([sys.executable, '-m', 'pip', 'install', pkg])
                    print(f'Successfully installed {pkg}')
                except Exception as e:
                    print(f'Failed to install {pkg}: {e}')
            
            # Re-check after installation attempts
            still_missing = []
            for pkg in missing:
                try:
                    module_name = pkg.replace('-', '_')
                    __import__(module_name)
                    print(f'[NOW OK] {pkg}')
                except ImportError:
                    still_missing.append(pkg)
            
            if still_missing:
                print(f'Still missing after installation attempts: {still_missing}')
                sys.exit(1)
        
        print('All packages verified successfully!')
        "

    - name: Show installed packages
      run: |
        echo "All installed packages:"
        pip list

    - name: Create application icon (if not exists)
      run: |
        python -c "
        import os
        from pathlib import Path
        
        assets_dir = Path('assets')
        assets_dir.mkdir(exist_ok=True)
        icon_path = assets_dir / 'icon.ico'
        
        if not icon_path.exists():
            print('Creating default icon...')
            try:
                # Try to use PIL if available
                from PIL import Image, ImageDraw
                img = Image.new('RGBA', (64, 64), (70, 130, 180, 255))
                draw = ImageDraw.Draw(img)
                draw.rectangle([10, 10, 54, 54], fill=(255, 255, 255, 255))
                draw.text((20, 25), 'PDF', fill=(70, 130, 180, 255))
                img.save(str(icon_path), format='ICO')
                print('Created default icon with PIL')
            except ImportError:
                print('PIL not available, creating minimal icon file')
                # Create a minimal valid ICO file
                ico_header = bytes([
                    0x00, 0x00,  # Reserved
                    0x01, 0x00,  # Type (1 = icon)
                    0x01, 0x00,  # Number of images
                    0x10,        # Width (16 pixels)
                    0x10,        # Height (16 pixels)
                    0x00,        # Colors (0 = 256 colors)
                    0x00,        # Reserved
                    0x01, 0x00,  # Color planes
                    0x20, 0x00,  # Bits per pixel
                    0x68, 0x00, 0x00, 0x00,  # Size of image data
                    0x16, 0x00, 0x00, 0x00   # Offset to image data
                ])
                # Add minimal image data (simplified)
                ico_data = ico_header + b'\x00' * 104  # Minimal pixel data
                with open(icon_path, 'wb') as f:
                    f.write(ico_data)
                print('Created minimal icon file')
            except Exception as e:
                print(f'Icon creation failed: {e}')
                # Create empty file to prevent errors
                icon_path.touch()
        else:
            print('Icon already exists')
        "

    - name: Display project structure
      run: |
        echo "Project structure:"
        Get-ChildItem -Recurse -Name | Sort-Object

    - name: Build executable
      run: |
        echo "Starting build process..."
        echo "Current directory: $PWD"
        echo "Python executable: $(Get-Command python | Select-Object -ExpandProperty Source)"
        python build_scripts/build.py

    - name: Verify build output
      run: |
        echo "Checking build output..."
        if (Test-Path "dist") {
          echo "Contents of dist folder:"
          Get-ChildItem dist -Recurse | Format-Table Name, Length, LastWriteTime
        } else {
          echo "ERROR: dist folder not found!"
          echo "Available folders:"
          Get-ChildItem -Directory
          exit 1
        }

    - name: Test executable
      run: |
        $exe_path = "dist/EmailPDFProcessor.exe"
        if (Test-Path $exe_path) {
          Write-Host "SUCCESS: Executable found at $exe_path"
          $file_size = (Get-Item $exe_path).Length / 1MB
          Write-Host "File size: $([math]::Round($file_size, 2)) MB"
          
          # Test executable properties
          $file_info = Get-ItemProperty $exe_path
          Write-Host "Created: $($file_info.CreationTime)"
          Write-Host "Modified: $($file_info.LastWriteTime)"
          
          # Quick startup test (GUI apps exit quickly)
          try {
            Write-Host "Testing executable startup..."
            $process = Start-Process -FilePath $exe_path -PassThru -WindowStyle Hidden -ErrorAction Stop
            Start-Sleep -Seconds 5
            if (!$process.HasExited) {
              Write-Host "Process still running, terminating..."
              $process.Kill()
            }
            Write-Host "[SUCCESS] Executable startup test completed"
          } catch {
            Write-Host "[INFO] Executable test completed (normal for GUI applications)"
          }
        } else {
          Write-Error "CRITICAL ERROR: Executable not found at $exe_path"
          Write-Host "Contents of current directory:"
          Get-ChildItem
          if (Test-Path "dist") {
            Write-Host "Contents of dist directory:"
            Get-ChildItem dist
          }
          if (Test-Path "build") {
            Write-Host "Contents of build directory:"
            Get-ChildItem build
          }
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: EmailPDFProcessor-Windows-${{ github.run_number }}
        path: |
          dist/EmailPDFProcessor.exe
        retention-days: 30
        compression-level: 6

    - name: Create Release (on tag)
      if: startsWith(github.ref, 'refs/tags/v')
      uses: softprops/action-gh-release@v2
      with:
        files: |
          dist/EmailPDFProcessor.exe
        name: Email PDF Processor ${{ github.ref_name }}
        body: |
          ## 📧➡️📊 Email PDF Processor ${{ github.ref_name }}
          
          ### 📥 Download
          - **EmailPDFProcessor.exe** - Standalone Windows executable
          - No installation required - just download and run!
          
          ### ✨ What's New
          - Fixed PyInstaller build issues
          - Improved error handling and logging
          - Enhanced GUI responsiveness
          - Better progress tracking
          
          ### 💻 System Requirements
          - Windows 10/11 (64-bit)
          - 4GB RAM minimum
          - 100MB free disk space
          
          ### 🚀 Usage
          1. Download EmailPDFProcessor.exe
          2. Run the executable
          3. Select folder with email files (.eml/.msg)
          4. Choose Excel output location
          5. Click "Process Emails & Generate Excel"
          6. View results in generated Excel file
          
          ### ⚠️ Windows Security Warning
          Windows may show a security warning. Click "More info" → "Run anyway"
          
          **Build Info:**
          - Built: ${{ github.event.head_commit.timestamp }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-info:
    runs-on: ubuntu-latest
    needs: build-windows
    if: always()
    
    steps:
    - name: Build Summary
      run: |
        echo "## 🏗️ Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-windows.result }}" = "success" ]; then
          echo "### ✅ BUILD SUCCESSFUL" >> $GITHUB_STEP_SUMMARY
          echo "- Windows executable built successfully" >> $GITHUB_STEP_SUMMARY
          echo "- All dependencies installed correctly" >> $GITHUB_STEP_SUMMARY
          echo "- Executable ready for download" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ BUILD FAILED" >> $GITHUB_STEP_SUMMARY
          echo "- Check the build logs for specific error details" >> $GITHUB_STEP_SUMMARY
          echo "- Common issues: missing dependencies, code errors" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Next Steps" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-windows.result }}" = "success" ]; then
          echo "1. 📦 Download from Artifacts section below" >> $GITHUB_STEP_SUMMARY
          echo "2. 🧪 Test on your Windows machine" >> $GITHUB_STEP_SUMMARY
          echo "3. 🏷️ Create release tag if working correctly" >> $GITHUB_STEP_SUMMARY
        else
          echo "1. 🔍 Review build logs above" >> $GITHUB_STEP_SUMMARY
          echo "2. 🛠️ Fix identified issues" >> $GITHUB_STEP_SUMMARY
          echo "3. 🔄 Push fixes to trigger new build" >> $GITHUB_STEP_SUMMARY
        fi
